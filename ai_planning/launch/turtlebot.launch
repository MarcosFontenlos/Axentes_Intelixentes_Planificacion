<?xml version="1.0"?>
<launch>

    <!-- ROSPlan turtlebot 2 demo; requires turtlebot_gazebo -->

    <!-- optionally disable gazebo gui to consume less resources -->
    <arg name="gazebo_gui" default="true" />

    <!-- turtlebot simulation -->
    <include file="$(find ai_planning)/launch/my_turtlebot_world.launch" >
        <arg name="gui" value="$(arg gazebo_gui)" />
    </include>

    <!-- ROSPlan -->

    <arg name="domain_path"		default="$(find ai_planning)/common/domain.pddl" />
	<arg name="problem_path"	default="$(find ai_planning)/common/problem.pddl" />
	<arg name="planning_language"	default="PDDL" />
	<arg name="robot_name"	 	default="" />
    <arg name="optimise"	 	default="false" />
    <arg name="opt" value="-s 3" if="$(arg optimise)" />
    <arg name="opt" value="-s 0" unless="$(arg optimise)" />

	<include file="$(find ai_planning)/launch/rosplan_full.launch">
		<arg name="domain_path"		 		value="$(arg domain_path)" />
		<arg name="problem_path" 			value="$(arg problem_path)" />
		<arg name="planning_language" 		value="PDDL" />
		<arg name="planner_topic" 			value="planner_output" />
		<arg name="data_path" 				value="/tmp/" />
		<arg name="generated_problem_path"	value="/tmp/gen_problem.pddl" />
		<arg name="dispatcher" 				value="simple" />
		<arg name="timeout_actions" 		value="true" />
		<!--<arg name="planner_command"      	value="timeout 5 $(find rosplan_planning_system)/common/bin/popf -n DOMAIN PROBLEM" />-->
		<!--<arg name="planner_interface"    	value="popf_planner_interface" />-->
        <arg name="planner_command"      	value="timeout 5 $(find rosplan_planning_system)/common/bin/Metric-FF -o DOMAIN -f PROBLEM $(arg opt)" />
        <arg name="planner_interface"    	value="ff_planner_interface" />
	</include>

    <!-- rosplan move base action interface, makes link between rosplan dispatcher and hardware -->
    <node pkg="ai_planning" type="rpmovebase" name="rosplan_interface_movebase" respawn="false" output="screen">
        <param name="knowledge_base" value="rosplan_knowledge_base" />
        <param name="pddl_action_name" value="move" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>

    <!-- rosplan clean action interface, makes link between rosplan dispatcher and hardware -->
    <node pkg="ai_planning" type="rpclean" name="rosplan_interface_clean" respawn="false" output="screen">
        <param name="knowledge_base" value="rosplan_knowledge_base" />
        <param name="pddl_action_name" value="clean" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>

    <!-- sim actions -->
	<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
		<arg name="pddl_action_name" value="empty" />
	</include>

</launch>
